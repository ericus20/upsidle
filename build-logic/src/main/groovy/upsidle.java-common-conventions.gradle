/*
 * This file was generated by the Gradle 'init' task.
 *
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    id 'pmd'
    id 'java'
    id 'idea'
    id 'jacoco'
    id 'eclipse'

    // NOTE: external plugin version is specified in implementation dependency artifact of the project's build file
    id 'com.diffplug.spotless'
}

group 'com.developersboard'
version '1.0.0'

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    constraints {
        // Define dependency versions as constraints
    }
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(19)
    }
}

testing {
    suites {
        test {
            useJUnitJupiter()
        }

        integrationTest(JvmTestSuite) {
            dependencies {
                implementation project()
            }

            targets {
                all {
                    testTask.configure {
                        maxHeapSize = '512m'
                        shouldRunAfter(test)
                    }
                }
            }
        }
    }
}

tasks.named('check') {
    dependsOn(testing.suites.integrationTest)
}

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs += ['-Xlint:deprecation']
    dependsOn 'spotlessApply'
}

tasks.withType(Test).configureEach {
    finalizedBy 'jacocoTestReport'
    // Fail the 'test' task on the first test failure
    failFast = true
    maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
}

spotless {
    format 'misc', {
        // define the files to apply `misc` to
        target '*.gradle', '*.md', '.gitignore'

        // define the steps to apply to those files
        trimTrailingWhitespace()
        indentWithSpaces()
        endWithNewline()
    }

    java {

        // define the steps to apply to those files
        trimTrailingWhitespace()
        indentWithSpaces()
        endWithNewline()
        removeUnusedImports()
        googleJavaFormat()
    }
}

jacocoTestReport {
    executionData(fileTree(project.buildDir).include("jacoco/*.exec"))
    reports {
        xml.required = true
        html.required = true
        csv.required = true
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [

            ])
        }))
    }
}

pmd {
    consoleOutput = true
    ruleSetFiles = files("${project.rootDir}/config/pmd-ruleset.xml")
    ruleSets = []
}
